/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2017-05-15 12:12:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages.catalog.book;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class pdfreader_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>Онлайн библиотека книг</title>\r\n");
      out.write("    <link rel='stylesheet' href='/resources/css/catalog/book/bookStyle.css'  >\r\n");
      out.write("    <link rel='stylesheet' href='/resources/css/catalog/styleCatalog.css'  >\r\n");
      out.write("    <link rel='stylesheet' href='/resources/css/index_page/indexStyle.css'  >\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/resources/css/bootstrap.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/resources/css/bootstrap-theme.min.css\">\r\n");
      out.write("    <script  src=\"/resources/js/jquery-2.1.4.min.js\"></script>\r\n");
      out.write("    <script src=\"/resources/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\" src=\"/resources/js/rating/jquery-stars-master/dist/stars.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"clearfix\" style=\"margin-top: 25px;\"></div>\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../nav.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"clearfix\" style=\"margin-top: 25px;\"></div>\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../slider.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"clearfix\" style=\"margin-top: 25px;\"></div>\r\n");
      out.write("    <div class=\"news\" style=\"    padding-left: 13%; overflow: auto;\">\r\n");
      out.write("\r\n");
      out.write("        <script src=\"/resources/js/pdfreader/build/pdf.js\"></script>\r\n");
      out.write("\r\n");
      out.write("        <h1 style=\"color: #2ad4d3\">Чтение онлайн</h1>\r\n");
      out.write("\r\n");
      out.write("        <div>\r\n");
      out.write("            <button id=\"prev\">Previous</button>\r\n");
      out.write("            <button id=\"next\">Next</button>\r\n");
      out.write("            &nbsp; &nbsp;\r\n");
      out.write("            <span>Page: <span id=\"page_num\"></span> / <span id=\"page_count\"></span></span>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <canvas id=\"the-canvas\"></canvas>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"clearfix\" style=\"margin-top: 25px;\"></div>\r\n");
      out.write("    <footer>\r\n");
      out.write("        <h5>Copyright © 2017 - Онлайн библиотека by Владислав Тоболич, Куртасова Ольга, Жлобич Ангелина</h5>\r\n");
      out.write("    </footer>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        var url = '/resources/books/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write(".pdf';\r\n");
      out.write("\r\n");
      out.write("        // The workerSrc property shall be specified.\r\n");
      out.write("        PDFJS.workerSrc = '/resources/js/pdfreader/build/pdf.worker.js';\r\n");
      out.write("\r\n");
      out.write("        var pdfDoc = null,\r\n");
      out.write("            pageNum = 1,\r\n");
      out.write("            pageRendering = false,\r\n");
      out.write("            pageNumPending = null,\r\n");
      out.write("            scale = 1.4,\r\n");
      out.write("            canvas = document.getElementById('the-canvas'),\r\n");
      out.write("            ctx = canvas.getContext('2d');\r\n");
      out.write("\r\n");
      out.write("        /**\r\n");
      out.write("         * Get page info from document, resize canvas accordingly, and render page.\r\n");
      out.write("         * @param num Page number.\r\n");
      out.write("         */\r\n");
      out.write("        function renderPage(num) {\r\n");
      out.write("            pageRendering = true;\r\n");
      out.write("            // Using promise to fetch the page\r\n");
      out.write("            pdfDoc.getPage(num).then(function(page) {\r\n");
      out.write("                var viewport = page.getViewport(scale);\r\n");
      out.write("                canvas.height = viewport.height;\r\n");
      out.write("                canvas.width = viewport.width;\r\n");
      out.write("\r\n");
      out.write("                // Render PDF page into canvas context\r\n");
      out.write("                var renderContext = {\r\n");
      out.write("                    canvasContext: ctx,\r\n");
      out.write("                    viewport: viewport\r\n");
      out.write("                };\r\n");
      out.write("                var renderTask = page.render(renderContext);\r\n");
      out.write("\r\n");
      out.write("                // Wait for rendering to finish\r\n");
      out.write("                renderTask.promise.then(function() {\r\n");
      out.write("                    pageRendering = false;\r\n");
      out.write("                    if (pageNumPending !== null) {\r\n");
      out.write("                        // New page rendering is pending\r\n");
      out.write("                        renderPage(pageNumPending);\r\n");
      out.write("                        pageNumPending = null;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // Update page counters\r\n");
      out.write("            document.getElementById('page_num').textContent = pageNum;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /**\r\n");
      out.write("         * If another page rendering in progress, waits until the rendering is\r\n");
      out.write("         * finised. Otherwise, executes rendering immediately.\r\n");
      out.write("         */\r\n");
      out.write("        function queueRenderPage(num) {\r\n");
      out.write("            if (pageRendering) {\r\n");
      out.write("                pageNumPending = num;\r\n");
      out.write("            } else {\r\n");
      out.write("                renderPage(num);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /**\r\n");
      out.write("         * Displays previous page.\r\n");
      out.write("         */\r\n");
      out.write("        function onPrevPage() {\r\n");
      out.write("            if (pageNum <= 1) {\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            pageNum--;\r\n");
      out.write("            queueRenderPage(pageNum);\r\n");
      out.write("        }\r\n");
      out.write("        document.getElementById('prev').addEventListener('click', onPrevPage);\r\n");
      out.write("\r\n");
      out.write("        /**\r\n");
      out.write("         * Displays next page.\r\n");
      out.write("         */\r\n");
      out.write("        function onNextPage() {\r\n");
      out.write("            if (pageNum >= pdfDoc.numPages) {\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            pageNum++;\r\n");
      out.write("            queueRenderPage(pageNum);\r\n");
      out.write("        }\r\n");
      out.write("        document.getElementById('next').addEventListener('click', onNextPage);\r\n");
      out.write("\r\n");
      out.write("        /**\r\n");
      out.write("         * Asynchronously downloads PDF.\r\n");
      out.write("         */\r\n");
      out.write("        PDFJS.getDocument(url).then(function(pdfDoc_) {\r\n");
      out.write("            pdfDoc = pdfDoc_;\r\n");
      out.write("            document.getElementById('page_count').textContent = pdfDoc.numPages;\r\n");
      out.write("\r\n");
      out.write("            // Initial/first page rendering\r\n");
      out.write("            renderPage(pageNum);\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
